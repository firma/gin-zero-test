// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"miya/apix/internal/model"
)

func newSysOrg(db *gorm.DB) sysOrg {
	_sysOrg := sysOrg{}

	_sysOrg.sysOrgDo.UseDB(db)
	_sysOrg.sysOrgDo.UseModel(&model.SysOrg{})

	tableName := _sysOrg.sysOrgDo.TableName()
	_sysOrg.ALL = field.NewField(tableName, "*")
	_sysOrg.ID = field.NewInt64(tableName, "id")
	_sysOrg.OrgName = field.NewString(tableName, "org_name")
	_sysOrg.POrgID = field.NewInt64(tableName, "p_org_id")
	_sysOrg.OrgFlag = field.NewString(tableName, "org_flag")
	_sysOrg.CreateTime = field.NewInt64(tableName, "create_time")
	_sysOrg.UpdateTime = field.NewInt64(tableName, "update_time")
	_sysOrg.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysOrg.DeleteTime = field.NewField(tableName, "delete_time")

	_sysOrg.fillFieldMap()

	return _sysOrg
}

type sysOrg struct {
	sysOrgDo sysOrgDo

	ALL        field.Field
	ID         field.Int64
	OrgName    field.String
	POrgID     field.Int64
	OrgFlag    field.String
	CreateTime field.Int64
	UpdateTime field.Int64
	ModifyTime field.Time
	DeleteTime field.Field

	fieldMap map[string]field.Expr
}

func (s sysOrg) Table(newTableName string) *sysOrg {
	s.sysOrgDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOrg) As(alias string) *sysOrg {
	s.sysOrgDo.DO = *(s.sysOrgDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOrg) updateTableName(table string) *sysOrg {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt64(table, "id")
	s.OrgName = field.NewString(table, "org_name")
	s.POrgID = field.NewInt64(table, "p_org_id")
	s.OrgFlag = field.NewString(table, "org_flag")
	s.CreateTime = field.NewInt64(table, "create_time")
	s.UpdateTime = field.NewInt64(table, "update_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysOrg) WithContext(ctx context.Context) *sysOrgDo { return s.sysOrgDo.WithContext(ctx) }

func (s sysOrg) TableName() string { return s.sysOrgDo.TableName() }

func (s sysOrg) Alias() string { return s.sysOrgDo.Alias() }

func (s *sysOrg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOrg) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["org_name"] = s.OrgName
	s.fieldMap["p_org_id"] = s.POrgID
	s.fieldMap["org_flag"] = s.OrgFlag
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysOrg) clone(db *gorm.DB) sysOrg {
	s.sysOrgDo.ReplaceDB(db)
	return s
}

type sysOrgDo struct{ gen.DO }

func (s sysOrgDo) Debug() *sysOrgDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOrgDo) WithContext(ctx context.Context) *sysOrgDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOrgDo) ReadDB() *sysOrgDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOrgDo) WriteDB() *sysOrgDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOrgDo) Clauses(conds ...clause.Expression) *sysOrgDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOrgDo) Returning(value interface{}, columns ...string) *sysOrgDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOrgDo) Not(conds ...gen.Condition) *sysOrgDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOrgDo) Or(conds ...gen.Condition) *sysOrgDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOrgDo) Select(conds ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOrgDo) Where(conds ...gen.Condition) *sysOrgDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOrgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysOrgDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysOrgDo) Order(conds ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOrgDo) Distinct(cols ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOrgDo) Omit(cols ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOrgDo) Join(table schema.Tabler, on ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOrgDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOrgDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOrgDo) Group(cols ...field.Expr) *sysOrgDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOrgDo) Having(conds ...gen.Condition) *sysOrgDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOrgDo) Limit(limit int) *sysOrgDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOrgDo) Offset(offset int) *sysOrgDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOrgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysOrgDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOrgDo) Unscoped() *sysOrgDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOrgDo) Create(values ...*model.SysOrg) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOrgDo) CreateInBatches(values []*model.SysOrg, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOrgDo) Save(values ...*model.SysOrg) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOrgDo) First() (*model.SysOrg, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrg), nil
	}
}

func (s sysOrgDo) Take() (*model.SysOrg, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrg), nil
	}
}

func (s sysOrgDo) Last() (*model.SysOrg, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrg), nil
	}
}

func (s sysOrgDo) Find() ([]*model.SysOrg, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOrg), err
}

func (s sysOrgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOrg, err error) {
	buf := make([]*model.SysOrg, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOrgDo) FindInBatches(result *[]*model.SysOrg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOrgDo) Attrs(attrs ...field.AssignExpr) *sysOrgDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOrgDo) Assign(attrs ...field.AssignExpr) *sysOrgDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOrgDo) Joins(fields ...field.RelationField) *sysOrgDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOrgDo) Preload(fields ...field.RelationField) *sysOrgDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOrgDo) FirstOrInit() (*model.SysOrg, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrg), nil
	}
}

func (s sysOrgDo) FirstOrCreate() (*model.SysOrg, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrg), nil
	}
}

func (s sysOrgDo) FindByPage(offset int, limit int) (result []*model.SysOrg, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOrgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOrgDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s *sysOrgDo) withDO(do gen.Dao) *sysOrgDo {
	s.DO = *do.(*gen.DO)
	return s
}
