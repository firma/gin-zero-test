// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"miya/apix/internal/model"
)

func newSysDict(db *gorm.DB) sysDict {
	_sysDict := sysDict{}

	_sysDict.sysDictDo.UseDB(db)
	_sysDict.sysDictDo.UseModel(&model.SysDict{})

	tableName := _sysDict.sysDictDo.TableName()
	_sysDict.ALL = field.NewField(tableName, "*")
	_sysDict.ID = field.NewInt64(tableName, "id")
	_sysDict.DataType = field.NewString(tableName, "data_type")
	_sysDict.ItemKey = field.NewString(tableName, "item_key")
	_sysDict.ItemValue = field.NewString(tableName, "item_value")
	_sysDict.Xh = field.NewInt32(tableName, "xh")
	_sysDict.OutData = field.NewString(tableName, "out_data")
	_sysDict.PID = field.NewInt64(tableName, "p_id")
	_sysDict.DictDesc = field.NewString(tableName, "dict_desc")
	_sysDict.DictLevel = field.NewString(tableName, "dict_level")
	_sysDict.CreateTime = field.NewInt64(tableName, "create_time")
	_sysDict.UpdateTime = field.NewInt64(tableName, "update_time")
	_sysDict.ModifyTime = field.NewTime(tableName, "modify_time")
	_sysDict.DeleteTime = field.NewField(tableName, "delete_time")

	_sysDict.fillFieldMap()

	return _sysDict
}

type sysDict struct {
	sysDictDo sysDictDo

	ALL        field.Field
	ID         field.Int64
	DataType   field.String
	ItemKey    field.String
	ItemValue  field.String
	Xh         field.Int32
	OutData    field.String
	PID        field.Int64
	DictDesc   field.String
	DictLevel  field.String
	CreateTime field.Int64
	UpdateTime field.Int64
	ModifyTime field.Time
	DeleteTime field.Field

	fieldMap map[string]field.Expr
}

func (s sysDict) Table(newTableName string) *sysDict {
	s.sysDictDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDict) As(alias string) *sysDict {
	s.sysDictDo.DO = *(s.sysDictDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDict) updateTableName(table string) *sysDict {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt64(table, "id")
	s.DataType = field.NewString(table, "data_type")
	s.ItemKey = field.NewString(table, "item_key")
	s.ItemValue = field.NewString(table, "item_value")
	s.Xh = field.NewInt32(table, "xh")
	s.OutData = field.NewString(table, "out_data")
	s.PID = field.NewInt64(table, "p_id")
	s.DictDesc = field.NewString(table, "dict_desc")
	s.DictLevel = field.NewString(table, "dict_level")
	s.CreateTime = field.NewInt64(table, "create_time")
	s.UpdateTime = field.NewInt64(table, "update_time")
	s.ModifyTime = field.NewTime(table, "modify_time")
	s.DeleteTime = field.NewField(table, "delete_time")

	s.fillFieldMap()

	return s
}

func (s *sysDict) WithContext(ctx context.Context) *sysDictDo { return s.sysDictDo.WithContext(ctx) }

func (s sysDict) TableName() string { return s.sysDictDo.TableName() }

func (s sysDict) Alias() string { return s.sysDictDo.Alias() }

func (s *sysDict) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDict) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["data_type"] = s.DataType
	s.fieldMap["item_key"] = s.ItemKey
	s.fieldMap["item_value"] = s.ItemValue
	s.fieldMap["xh"] = s.Xh
	s.fieldMap["out_data"] = s.OutData
	s.fieldMap["p_id"] = s.PID
	s.fieldMap["dict_desc"] = s.DictDesc
	s.fieldMap["dict_level"] = s.DictLevel
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["modify_time"] = s.ModifyTime
	s.fieldMap["delete_time"] = s.DeleteTime
}

func (s sysDict) clone(db *gorm.DB) sysDict {
	s.sysDictDo.ReplaceDB(db)
	return s
}

type sysDictDo struct{ gen.DO }

func (s sysDictDo) Debug() *sysDictDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictDo) WithContext(ctx context.Context) *sysDictDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictDo) ReadDB() *sysDictDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDictDo) WriteDB() *sysDictDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDictDo) Clauses(conds ...clause.Expression) *sysDictDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictDo) Returning(value interface{}, columns ...string) *sysDictDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictDo) Not(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictDo) Or(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictDo) Select(conds ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictDo) Where(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysDictDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysDictDo) Order(conds ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictDo) Distinct(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictDo) Omit(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictDo) Join(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictDo) Group(cols ...field.Expr) *sysDictDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictDo) Having(conds ...gen.Condition) *sysDictDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictDo) Limit(limit int) *sysDictDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictDo) Offset(offset int) *sysDictDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysDictDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictDo) Unscoped() *sysDictDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictDo) Create(values ...*model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictDo) CreateInBatches(values []*model.SysDict, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictDo) Save(values ...*model.SysDict) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictDo) First() (*model.SysDict, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Take() (*model.SysDict, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Last() (*model.SysDict, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) Find() ([]*model.SysDict, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDict), err
}

func (s sysDictDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDict, err error) {
	buf := make([]*model.SysDict, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictDo) FindInBatches(result *[]*model.SysDict, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictDo) Attrs(attrs ...field.AssignExpr) *sysDictDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictDo) Assign(attrs ...field.AssignExpr) *sysDictDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictDo) Joins(fields ...field.RelationField) *sysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDictDo) Preload(fields ...field.RelationField) *sysDictDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDictDo) FirstOrInit() (*model.SysDict, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) FirstOrCreate() (*model.SysDict, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDict), nil
	}
}

func (s sysDictDo) FindByPage(offset int, limit int) (result []*model.SysDict, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDictDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s *sysDictDo) withDO(do gen.Dao) *sysDictDo {
	s.DO = *do.(*gen.DO)
	return s
}
