// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"miya/api/internal/handler"
	system3 "miya/api/internal/handler/system"
	user2 "miya/api/internal/handler/user"
	"miya/api/internal/logic"
	system2 "miya/api/internal/logic/system"
	"miya/api/internal/logic/user"
	"miya/api/internal/middleware"
	"miya/api/internal/repository"
	"miya/api/internal/repository/system"
	"miya/api/internal/repository/useractivity"
	"miya/api/internal/routes"
)

// Injectors from wire.go:

func Build() Entry {
	iUserActivityRepo := useractivity.NewUserActivityRepo()
	iUserLogic := user.NewUserLogic(iUserActivityRepo)
	userHandler := user2.NewHandler(iUserLogic)
	iCasBinRepo := system.NewCasBinRepo()
	iSystemLogic := system2.NewSystemLogic(iCasBinRepo)
	systemHandler := system3.NewHandler(iSystemLogic)
	handlers := handler.Handlers{
		User:   userHandler,
		System: systemHandler,
	}
	authMiddleware := middleware.NewAuthMiddleware(iSystemLogic)
	middlewares := middleware.Middlewares{
		Auth: authMiddleware,
	}
	internalEntry := Entry{
		Handlers:    handlers,
		Middlewares: middlewares,
	}
	return internalEntry
}

// wire.go:

var Provider = wire.NewSet(handler.Provider, middleware.Provider, repository.Provider, logic.Provider, wire.Struct(new(Entry), "*"))

type Entry struct {
	Handlers    handler.Handlers
	Middlewares middleware.Middlewares
}

var entry Entry

func Setup(e Entry) {
	entry = e
}

func RegisterRoutes(r *gin.Engine) {
	routes.RegisterRoutes(r, entry.Middlewares, entry.Handlers)
}
