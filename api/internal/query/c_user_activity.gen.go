// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"miya/api/internal/model"
)

func newUserActivity(db *gorm.DB) userActivity {
	_userActivity := userActivity{}

	_userActivity.userActivityDo.UseDB(db)
	_userActivity.userActivityDo.UseModel(&model.UserActivity{})

	tableName := _userActivity.userActivityDo.TableName()
	_userActivity.ALL = field.NewField(tableName, "*")
	_userActivity.ID = field.NewInt64(tableName, "id")
	_userActivity.UserID = field.NewInt64(tableName, "user_id")
	_userActivity.LatestLoginAt = field.NewInt64(tableName, "latest_login_at")
	_userActivity.CreateTime = field.NewInt64(tableName, "create_time")
	_userActivity.UpdateTime = field.NewInt64(tableName, "update_time")
	_userActivity.ModifyTime = field.NewTime(tableName, "modify_time")
	_userActivity.DeleteTime = field.NewField(tableName, "delete_time")

	_userActivity.fillFieldMap()

	return _userActivity
}

type userActivity struct {
	userActivityDo userActivityDo

	ALL           field.Field
	ID            field.Int64
	UserID        field.Int64
	LatestLoginAt field.Int64
	CreateTime    field.Int64
	UpdateTime    field.Int64
	ModifyTime    field.Time
	DeleteTime    field.Field

	fieldMap map[string]field.Expr
}

func (u userActivity) Table(newTableName string) *userActivity {
	u.userActivityDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userActivity) As(alias string) *userActivity {
	u.userActivityDo.DO = *(u.userActivityDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userActivity) updateTableName(table string) *userActivity {
	u.ALL = field.NewField(table, "*")
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.LatestLoginAt = field.NewInt64(table, "latest_login_at")
	u.CreateTime = field.NewInt64(table, "create_time")
	u.UpdateTime = field.NewInt64(table, "update_time")
	u.ModifyTime = field.NewTime(table, "modify_time")
	u.DeleteTime = field.NewField(table, "delete_time")

	u.fillFieldMap()

	return u
}

func (u *userActivity) WithContext(ctx context.Context) *userActivityDo {
	return u.userActivityDo.WithContext(ctx)
}

func (u userActivity) TableName() string { return u.userActivityDo.TableName() }

func (u userActivity) Alias() string { return u.userActivityDo.Alias() }

func (u *userActivity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userActivity) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["latest_login_at"] = u.LatestLoginAt
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["update_time"] = u.UpdateTime
	u.fieldMap["modify_time"] = u.ModifyTime
	u.fieldMap["delete_time"] = u.DeleteTime
}

func (u userActivity) clone(db *gorm.DB) userActivity {
	u.userActivityDo.ReplaceDB(db)
	return u
}

type userActivityDo struct{ gen.DO }

func (u userActivityDo) Debug() *userActivityDo {
	return u.withDO(u.DO.Debug())
}

func (u userActivityDo) WithContext(ctx context.Context) *userActivityDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userActivityDo) ReadDB() *userActivityDo {
	return u.Clauses(dbresolver.Read)
}

func (u userActivityDo) WriteDB() *userActivityDo {
	return u.Clauses(dbresolver.Write)
}

func (u userActivityDo) Clauses(conds ...clause.Expression) *userActivityDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userActivityDo) Returning(value interface{}, columns ...string) *userActivityDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userActivityDo) Not(conds ...gen.Condition) *userActivityDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userActivityDo) Or(conds ...gen.Condition) *userActivityDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userActivityDo) Select(conds ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userActivityDo) Where(conds ...gen.Condition) *userActivityDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userActivityDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userActivityDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userActivityDo) Order(conds ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userActivityDo) Distinct(cols ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userActivityDo) Omit(cols ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userActivityDo) Join(table schema.Tabler, on ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userActivityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userActivityDo) RightJoin(table schema.Tabler, on ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userActivityDo) Group(cols ...field.Expr) *userActivityDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userActivityDo) Having(conds ...gen.Condition) *userActivityDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userActivityDo) Limit(limit int) *userActivityDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userActivityDo) Offset(offset int) *userActivityDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userActivityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userActivityDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userActivityDo) Unscoped() *userActivityDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userActivityDo) Create(values ...*model.UserActivity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userActivityDo) CreateInBatches(values []*model.UserActivity, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userActivityDo) Save(values ...*model.UserActivity) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userActivityDo) First() (*model.UserActivity, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Take() (*model.UserActivity, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Last() (*model.UserActivity, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) Find() ([]*model.UserActivity, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserActivity), err
}

func (u userActivityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserActivity, err error) {
	buf := make([]*model.UserActivity, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userActivityDo) FindInBatches(result *[]*model.UserActivity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userActivityDo) Attrs(attrs ...field.AssignExpr) *userActivityDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userActivityDo) Assign(attrs ...field.AssignExpr) *userActivityDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userActivityDo) Joins(fields ...field.RelationField) *userActivityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userActivityDo) Preload(fields ...field.RelationField) *userActivityDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userActivityDo) FirstOrInit() (*model.UserActivity, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) FirstOrCreate() (*model.UserActivity, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserActivity), nil
	}
}

func (u userActivityDo) FindByPage(offset int, limit int) (result []*model.UserActivity, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userActivityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userActivityDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u *userActivityDo) withDO(do gen.Dao) *userActivityDo {
	u.DO = *do.(*gen.DO)
	return u
}
