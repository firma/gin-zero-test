// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		SysMenu:      newSysMenu(db),
		SysOrg:       newSysOrg(db),
		SysRole:      newSysRole(db),
		SysRoleMenu:  newSysRoleMenu(db),
		SysUser:      newSysUser(db),
		SysUserRole:  newSysUserRole(db),
		UserActivity: newUserActivity(db),
	}
}

type Query struct {
	db *gorm.DB

	SysMenu      sysMenu
	SysOrg       sysOrg
	SysRole      sysRole
	SysRoleMenu  sysRoleMenu
	SysUser      sysUser
	SysUserRole  sysUserRole
	UserActivity userActivity
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		SysMenu:      q.SysMenu.clone(db),
		SysOrg:       q.SysOrg.clone(db),
		SysRole:      q.SysRole.clone(db),
		SysRoleMenu:  q.SysRoleMenu.clone(db),
		SysUser:      q.SysUser.clone(db),
		SysUserRole:  q.SysUserRole.clone(db),
		UserActivity: q.UserActivity.clone(db),
	}
}

type queryCtx struct {
	SysMenu      *sysMenuDo
	SysOrg       *sysOrgDo
	SysRole      *sysRoleDo
	SysRoleMenu  *sysRoleMenuDo
	SysUser      *sysUserDo
	SysUserRole  *sysUserRoleDo
	UserActivity *userActivityDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysMenu:      q.SysMenu.WithContext(ctx),
		SysOrg:       q.SysOrg.WithContext(ctx),
		SysRole:      q.SysRole.WithContext(ctx),
		SysRoleMenu:  q.SysRoleMenu.WithContext(ctx),
		SysUser:      q.SysUser.WithContext(ctx),
		SysUserRole:  q.SysUserRole.WithContext(ctx),
		UserActivity: q.UserActivity.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
